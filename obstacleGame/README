Absolutely, I can translate that into English for you. Here's the organized text for your GitHub README in English:

```markdown
# Learning C# Programming with Unity

This repository contains scripts and projects developed while learning C# programming with Unity. The aim is to document progress and share the knowledge acquired along the way.

## Introduction

In this project, I am enhancing my C# skills and learning how to use Unity to create games and other interactive applications. The scripts here are practical examples of what I've learned.

## Getting Started

To clone this repository and run it locally, follow these steps:

1. Ensure you have Unity installed on your machine.
2. Clone this repository using the command:
   ```bash
   git clone https://github.com/your-username/your-repository.git
   ```
3. Open Unity Hub and add the cloned project.
4. Open the project in the Unity Editor.

## Usage

### Movement Script

One of the scripts I developed is `mover.cs`, which enables movement of an object in the scene using the arrow keys or the WASD keys. Here is the code:

```csharp
using UnityEngine;

public class mover : MonoBehaviour
{
    [SerializeField] float moveSpeed = 0;

    void Update()
    {
        float xValue = Input.GetAxis("Horizontal") * Time.deltaTime * moveSpeed;
        float zValue = Input.GetAxis("Vertical") * Time.deltaTime * moveSpeed;

        transform.Translate(xValue, 0, zValue);
    }
}
```

## Explanation of Concepts Used

### `using` Directives

- `using UnityEngine;`: Imports the UnityEngine namespace, essential for all Unity scripts as it contains core classes such as MonoBehaviour, GameObject, Transform, etc.

### MonoBehaviour

- `public class mover : MonoBehaviour`: Declares a public class named `mover` that inherits from MonoBehaviour. MonoBehaviour is the base class for all Unity scripts.

### `[SerializeField]` Attribute

- `[SerializeField]`: The SerializeField attribute makes the `moveSpeed` field visible and editable in the Unity Inspector, even though it is private.

### `Start` and `Update` Methods

- `void Update()`: The Update method is called once per frame. This is where you place code that needs to be executed continuously while the game is running.

### `Input.GetAxis` and `Time.deltaTime`

- `float xValue = Input.GetAxis("Horizontal") * Time.deltaTime * moveSpeed;`: Captures the horizontal axis input (arrow keys or A/D keys). `Input.GetAxis("Horizontal")` returns a value between -1 and 1, depending on user input. `Time.deltaTime` is the time in seconds since the last frame, ensuring movement is consistent across different frame rates.

## Contributions

This is a learning project, but I am open to suggestions and improvements. Feel free to open issues or submit pull requests.

## License

This project is licensed under the MIT License. See the LICENSE file for more details.
```

Make sure to replace `your-username/your-repository` with your actual GitHub username and repository name. I hope this helps make your README clear and professional!
